<?php
/**
 * Clase para integraci√≥n con la API de Gemini
 */

if (!defined('ABSPATH')) {
    exit;
}

class WPSA_Gemini_API {
    
    private static $instance = null;
    private $api_key;
    private $api_url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
    private $debug_data = null;
    
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    private function __construct() {
        $this->api_key = get_option('wpsa_gemini_api_key', '');
        error_log('üîç WPSA Debug - API Key obtenida: ' . (!empty($this->api_key) ? 'Configurada (' . strlen($this->api_key) . ' caracteres)' : 'NO CONFIGURADA'));
    }

    
    
    /**
     * Generar pregunta para autoevaluaci√≥n
     */
    public function generate_question($materia, $tema = '', $modalidad = 'preguntas_simples', $grado = '', $nivel = 'intermedio', $numero_pregunta = 1, $temario = '', $materia_id = null, $previous_questions = array()) {
        error_log('üîç WPSA Debug - Iniciando generate_question con API Key: ' . (!empty($this->api_key) ? 'Configurada' : 'NO CONFIGURADA'));
        
        if (empty($this->api_key)) {
            error_log('‚ùå WPSA Debug - ERROR: API Key de Gemini no est√° configurada');
            return false;
        }
        
        // Si se proporciona materia_id, obtener el temario directamente de la BD
        if ($materia_id) {
            $database = WPSA_Database::get_instance();
            $materia_data = $database->get_materia($materia_id);
            
            if ($materia_data) {
                // Obtener temario (prioridad: temario_analizado > temario > descripci√≥n)
                if (!empty($materia_data->temario_analizado)) {
                    $temario = $materia_data->temario_analizado;
                    error_log('üîç WPSA Debug - Usando temario_analizado desde BD, longitud: ' . strlen($temario));
                } elseif (!empty($materia_data->temario)) {
                    $temario = $materia_data->temario;
                    error_log('üîç WPSA Debug - Usando temario desde BD, longitud: ' . strlen($temario));
                } elseif (!empty($materia_data->descripcion)) {
                    $temario = $materia_data->descripcion;
                    error_log('üîç WPSA Debug - Usando descripcion desde BD, longitud: ' . strlen($temario));
                } else {
                    error_log('üîç WPSA Debug - No se encontr√≥ temario en la BD para materia_id: ' . $materia_id);
                }
                
                // Actualizar datos de la materia con los de la BD
                $materia = $materia_data->nombre;
                $grado = $materia_data->grado;
            }
        }
        
        // Mostrar en consola todos los datos que recibe la funci√≥n generate_question
        $datos_recibidos = array(
            'materia' => $materia,
            'tema' => $tema,
            'modalidad' => $modalidad,
            'grado' => $grado,
            'nivel' => $nivel,
            'numero_pregunta' => $numero_pregunta,
            'temario' => $temario,
            'temario_length' => strlen($temario),
            'materia_id' => $materia_id,
            'api_key_configured' => !empty($this->api_key),
            'timestamp' => current_time('mysql')
        );
        
        error_log('üîç WPSA Debug - Datos recibidos en generate_question(): ' . print_r($datos_recibidos, true));
        
        // Agregar datos de debug a la respuesta para mostrarlos en consola del navegador
        $this->debug_data = $datos_recibidos;
        
        $prompt = $this->build_question_prompt($materia, $tema, $modalidad, $grado, $nivel, $numero_pregunta, $temario, $previous_questions);
        
        // Mostrar el prompt completo que se env√≠a a la IA
        error_log('ü§ñ WPSA Debug - Prompt completo enviado a la IA:');
        error_log('=====================================');
        error_log($prompt);
        error_log('=====================================');
        error_log('üìè Longitud del prompt: ' . strlen($prompt) . ' caracteres');
        
        // Agregar el prompt a los datos de debug para mostrarlo en consola
        $this->debug_data['prompt_completo'] = $prompt;
        $this->debug_data['prompt_length'] = strlen($prompt);
        
        error_log('üîç WPSA Debug - Haciendo petici√≥n a la API de Gemini...');
        $response = $this->make_api_request($prompt);
        
        error_log('üîç WPSA Debug - Respuesta de la API de Gemini: ' . print_r($response, true));
        
        if ($response && isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            error_log('‚úÖ WPSA Debug - Respuesta v√°lida recibida de la API');
            $question_data = $this->parse_question_response($response['candidates'][0]['content']['parts'][0]['text'], $modalidad);
            
            error_log('üîç WPSA Debug - Pregunta parseada: ' . print_r($question_data, true));
            
            // Agregar datos de debug a la respuesta
            if ($question_data && $this->debug_data) {
                $question_data['debug_data'] = $this->debug_data;
            }
            
            return $question_data;
        } else {
            error_log('‚ùå WPSA Debug - Error: Respuesta inv√°lida de la API de Gemini');
            if ($response) {
                error_log('‚ùå WPSA Debug - Estructura de respuesta: ' . print_r($response, true));
            } else {
                error_log('‚ùå WPSA Debug - La respuesta es null o false');
            }
        }
        
        return false;
    }
    
    /**
     * Evaluar respuesta del estudiante
     */
    public function evaluate_answer($pregunta, $respuesta_estudiante, $respuesta_correcta = '') {
        if (empty($this->api_key)) {
            error_log('‚ùå API key missing for evaluation');
            return ['error' => 'API no configurada'];
        }
        
        try {
            $prompt = $this->build_evaluation_prompt($pregunta, $respuesta_estudiante, $respuesta_correcta);
            $response = $this->make_api_request($prompt);
            
            if (!$response || !isset($response['candidates'][0]['content']['parts'][0]['text'])) {
                throw new Exception('Respuesta vac√≠a de la API');
            }
            
            $evaluation = $this->parse_evaluation_response($response['candidates'][0]['content']['parts'][0]['text']);
            
            // Validate minimum response structure
            if (!isset($evaluation['puntuacion']) || !isset($evaluation['feedback'])) {
                throw new Exception('Estructura de evaluaci√≥n inv√°lida');
            }
            
            return $evaluation;
            
        } catch (Exception $e) {
            error_log('‚ùå Error en evaluaci√≥n: ' . $e->getMessage());
            return $this->generate_fallback_evaluation($respuesta_estudiante);
        }
    }
    
    private function generate_fallback_evaluation($respuesta, $pregunta) {
        // An√°lisis l√©xico mejorado
        $respuesta_limpia = strip_tags($respuesta);
        $word_count = str_word_count($respuesta_limpia);
        
        // Detectar elementos clave
        $has_example = preg_match('/ejemplo|por ejemplo|como/i', $respuesta_limpia);
        $has_explanation = preg_match('/porque|por qu√©|debido a|ya que/i', $respuesta_limpia);
        $has_tech_terms = preg_match('/\b(?:funci√≥n|variable|algoritmo|m√©todo|clase|objeto)\b/i', $pregunta);
        
        // Calcular puntuaci√≥n
        $score = min(10, max(0,
            round($word_count / 15) +
            ($has_example ? 3 : 0) +
            ($has_explanation ? 4 : 0) +
            ($has_tech_terms ? 3 : 0)
        ));

        // Generar feedback contextual
        $feedback = [];
        
        if ($word_count < 20) {
            $feedback[] = "Respuesta demasiado corta. Desarrolla m√°s tus ideas.";
        } elseif ($word_count > 100) {
            $feedback[] = "Buena extensi√≥n, pero s√© m√°s conciso.";
        }
        
        if (!$has_example) {
            $feedback[] = "Incluir un ejemplo pr√°ctico mejorar√≠a tu respuesta.";
        }
        
        if (!$has_explanation) {
            $feedback[] = "Explica el por qu√© detr√°s de los conceptos.";
        }
        
        if (empty($feedback)) {
            $feedback[] = "Buena estructura general. Revisa los detalles t√©cnicos.";
        }

        return [
            'puntuacion' => $score,
            'feedback' => implode(' ', $feedback),
            'recomendaciones' => "Practica con ejercicios similares y revisa los conceptos clave."
        ];
    }
    
    /**
     * Analizar PDF y extraer temario usando la nueva API de documentos de Gemini
     */
    public function analyze_pdf($pdf_url) {
        if (empty($this->api_key)) {
            return false;
        }
        
        // Descargar el PDF
        $pdf_content = $this->download_pdf($pdf_url);
        if (!$pdf_content) {
            return false;
        }
        
        // Codificar el PDF en base64
        $pdf_base64 = base64_encode($pdf_content);
        
        // Crear el prompt para an√°lisis
        $prompt = "Analiza este programa de curso en PDF y extrae un temario estructurado y detallado. Organiza los temas por unidades o m√≥dulos y proporciona una descripci√≥n breve pero completa de cada tema. Incluye conceptos espec√≠ficos, tecnolog√≠as mencionadas, y objetivos de aprendizaje. El formato debe ser claro y √∫til para generar preguntas de evaluaci√≥n.";
        
        // Usar la nueva API de documentos de Gemini
        $response = $this->make_document_api_request($pdf_base64, $prompt);
        
        if ($response && isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            return $response['candidates'][0]['content']['parts'][0]['text'];
        }
        
        return false;
    }
    
    /**
     * Generar recomendaciones basadas en el rendimiento
     */
    public function generate_recommendations($autoevaluacion_data) {
        if (empty($this->api_key)) {
            return false;
        }
        
        $prompt = $this->build_recommendations_prompt($autoevaluacion_data);
        
        $response = $this->make_api_request($prompt);
        
        if ($response && isset($response['candidates'][0]['content']['parts'][0]['text'])) {
            return $response['candidates'][0]['content']['parts'][0]['text'];
        }
        
        return false;
    }
    
    /**
     * Construir prompt para generar pregunta
     */
    private function build_question_prompt($materia, $tema, $modalidad, $grado, $nivel, $numero_pregunta, $temario = '', $previous_questions = array()) {
        // Log de par√°metros recibidos en build_question_prompt
        error_log('üîç WPSA Debug - Par√°metros en build_question_prompt:');
        error_log('  - Materia: ' . $materia);
        error_log('  - Tema: ' . $tema);
        error_log('  - Modalidad: ' . $modalidad);
        error_log('  - Grado: ' . $grado);
        error_log('  - Nivel: ' . $nivel);
        error_log('  - N√∫mero pregunta: ' . $numero_pregunta);
        error_log('  - Temario length: ' . strlen($temario));
        
        // Generar variaci√≥n √∫nica para evitar repetici√≥n
        $variacion_id = $this->generate_variation_id($materia, $numero_pregunta, $nivel);
        
        $base_prompt = "IMPORTANTE: SIGUE EXACTAMENTE LAS SIGUIENTES INSTRUCCIONES. Eres un profesor experto en {$materia}";
        
        if (!empty($grado)) {
            $base_prompt .= " para estudiantes de {$grado}";
        }
        
        $base_prompt .= ". Genera una pregunta de autoevaluaci√≥n √öNICA y VARIADA";
        
        // Si hay temario disponible, usarlo para generar preguntas m√°s espec√≠ficas
        if (!empty($temario)) {
            $base_prompt .= " bas√°ndote EXCLUSIVAMENTE en el siguiente temario de la materia:\n\n";
            $base_prompt .= "=== TEMARIO OFICIAL DE LA MATERIA ===\n";
            $base_prompt .= $temario . "\n";
            $base_prompt .= "=== FIN DEL TEMARIO ===\n\n";
            
            // Extraer temas espec√≠ficos del temario
            $specific_topics = $this->extract_specific_topics($temario, $nivel);
            if (!empty($specific_topics)) {
                $base_prompt .= "=== TEMAS ESPEC√çFICOS IDENTIFICADOS PARA NIVEL {$nivel} ===\n";
                foreach ($specific_topics as $index => $topic) {
                    $base_prompt .= ($index + 1) . ". " . $topic . "\n";
                }
                $base_prompt .= "=== FIN DE TEMAS ESPEC√çFICOS ===\n\n";
            }
            
            $base_prompt .= "INSTRUCCIONES CR√çTICAS:\n";
            $base_prompt .= "1. DEBES usar SOLO conceptos, temas y contenidos que aparezcan en el temario anterior\n";
            $base_prompt .= "2. NO uses conceptos gen√©ricos que no est√©n en el temario\n";
            $base_prompt .= "3. La pregunta debe estar DIRECTAMENTE relacionada con los temas del temario\n";
            $base_prompt .= "4. Si el temario menciona tecnolog√≠as espec√≠ficas (PHP, JavaScript, etc.), √∫salas\n";
            $base_prompt .= "5. Si el temario menciona conceptos espec√≠ficos, enf√≥cate en ellos\n";
            $base_prompt .= "6. PRIORIZA los temas espec√≠ficos identificados arriba\n\n";
            
            if (!empty($tema)) {
                $base_prompt .= "TEMA ESPEC√çFICO SOLICITADO: {$tema}\n";
                $base_prompt .= "Si este tema aparece en el temario, √∫salo. Si no, selecciona un tema similar del temario.\n\n";
            } else {
                $base_prompt .= "SELECCI√ìN DE TEMA: Elige un tema ESPEC√çFICO del temario que sea apropiado para el nivel {$nivel}\n";
                $base_prompt .= "PREFERIBLEMENTE de los temas espec√≠ficos identificados arriba.\n\n";
            }
        } else {
            if (!empty($tema)) {
                $base_prompt .= " espec√≠ficamente sobre el tema: {$tema}";
            } else {
                $base_prompt .= " sobre conceptos fundamentales de {$materia}";
            }
        }
        
        // Configurar nivel de dificultad
        $nivel_instrucciones = $this->get_nivel_instrucciones($nivel, $numero_pregunta);
        $base_prompt .= " con nivel de dificultad: {$nivel_instrucciones}";
        
        // Agregar instrucciones espec√≠ficas sobre modalidad y nivel
        $base_prompt .= "\n\nüö® INSTRUCCIONES CR√çTICAS OBLIGATORIAS - NO LAS IGNORES:";
        $base_prompt .= "\nüö® MODALIDAD SELECCIONADA POR EL USUARIO: " . strtoupper($modalidad);
        $base_prompt .= "\nüö® NIVEL SELECCIONADO POR EL USUARIO: " . strtoupper($nivel);
        $base_prompt .= "\nüö® TEMA ESPEC√çFICO SOLICITADO: " . (!empty($tema) ? $tema : 'CUALQUIER TEMA DEL TEMARIO');
        $base_prompt .= "\nüö® DEBES RESPETAR EXACTAMENTE estas configuraciones del usuario. NO cambies la modalidad ni el nivel.";
        $base_prompt .= "\nüö® EJEMPLO: Si modalidad es 'preguntas_simples', genera UNA pregunta simple, NO un ejercicio o c√≥digo.";
        $base_prompt .= "\nüö® EJEMPLO: Si nivel es 'inicial', usa preguntas b√°sicas como '¬øQu√© es X?', NO complejas.";
        $base_prompt .= "\nüö® Si tema es '{$tema}', la pregunta DEBE relacionarse directamente con √©l.";
        
        // Agregar preguntas anteriores para evitar repeticiones
        if (!empty($previous_questions)) {
            $base_prompt .= "\n\nüö´ PREGUNTAS ANTERIORES EN ESTA EVALUACI√ìN (ESTRICTAMENTE PROHIBIDO REPETIR):";
            foreach ($previous_questions as $index => $prev_question) {
                $question_text = is_array($prev_question) ? ($prev_question['pregunta'] ?? $prev_question['question'] ?? '') : ($prev_question->pregunta ?? $prev_question->question ?? '');
                if (!empty($question_text)) {
                    $base_prompt .= "\n" . ($index + 1) . ". " . substr($question_text, 0, 150) . (strlen($question_text) > 150 ? "..." : "");
                }
            }
            $base_prompt .= "\n\n‚ö†Ô∏è INSTRUCCIONES CR√çTICAS PARA EVITAR REPETICI√ìN:";
            $base_prompt .= "\n- NO copies ninguna de las preguntas anteriores";
            $base_prompt .= "\n- NO uses los mismos temas o conceptos principales";
            $base_prompt .= "\n- NO preguntes sobre aspectos similares de los mismos temas";
            $base_prompt .= "\n- Cambia completamente el enfoque y perspectiva";
            $base_prompt .= "\n- Si preguntaste sobre 'variables', ahora pregunta sobre 'funciones' o 'bucles'";
            $base_prompt .= "\n- Si preguntaste sobre 'importancia', ahora pregunta sobre 'aplicaci√≥n pr√°ctica'";
            $base_prompt .= "\n- Si preguntaste sobre 'definici√≥n', ahora pregunta sobre 'ejemplos' o 'casos de uso'";
            $base_prompt .= "\n- Usa un tema completamente diferente del temario";
            $base_prompt .= "\n\nSi no puedes encontrar un tema diferente en el temario, es mejor generar una pregunta gen√©rica pero completamente diferente que las anteriores.";
        }

        // Agregar variaci√≥n √∫nica basada en el ID de variaci√≥n
        $base_prompt .= "\n\nVARIACI√ìN √öNICA #{$variacion_id}: Para hacer la evaluaci√≥n completamente diferente y evitar cualquier similitud con preguntas anteriores, usa el siguiente enfoque espec√≠fico:";

        $enfoques = $this->get_variation_approaches($variacion_id);
        $base_prompt .= "\n" . $enfoques;

        // Agregar instrucciones adicionales para asegurar variedad
        $base_prompt .= "\n\nGARANTIZANDO VARIEDAD EXTREMA:";
        $base_prompt .= "\n- Si es la primera pregunta: usa un enfoque introductorio b√°sico";
        $base_prompt .= "\n- Si es la segunda pregunta: cambia completamente a un enfoque aplicado";
        $base_prompt .= "\n- Si es la tercera pregunta: usa un enfoque anal√≠tico o de resoluci√≥n de problemas";
        $base_prompt .= "\n- Si es la cuarta pregunta: enf√≥cate en casos pr√°cticos o escenarios reales";
        $base_prompt .= "\n- Si es la quinta pregunta: pregunta sobre tendencias, futuro o evoluci√≥n del tema";
        $previous_count = $numero_pregunta - 1;
        $base_prompt .= "\n\nPregunta actual: #{$numero_pregunta} - Aseg√∫rate de que sea completamente diferente a las {$previous_count} preguntas anteriores.";
        
        if (!empty($temario)) {
            $base_prompt .= "\n\nREQUISITOS OBLIGATORIOS PARA LA PREGUNTA:\n";
            $base_prompt .= "1. DEBE estar basada en un tema espec√≠fico del temario\n";
            $base_prompt .= "2. DEBE usar terminolog√≠a y conceptos del temario\n";
            $base_prompt .= "3. DEBE ser aplicable al contexto de la materia seg√∫n el temario\n";
            $base_prompt .= "4. NO uses conceptos gen√©ricos que no aparezcan en el temario\n";
            $base_prompt .= "5. Si el temario menciona herramientas espec√≠ficas, √∫salas en la pregunta\n";
            $base_prompt .= "6. Si el temario menciona metodolog√≠as espec√≠ficas, enf√≥cate en ellas\n\n";
            
            $base_prompt .= "ENFOQUES PERMITIDOS (basados en el temario):\n";
            $base_prompt .= "- Aplicaci√≥n pr√°ctica de conceptos del temario en escenarios reales\n";
            $base_prompt .= "- Comparaci√≥n de diferentes enfoques mencionados en el temario\n";
            $base_prompt .= "- An√°lisis de casos espec√≠ficos relacionados con los temas del temario\n";
            $base_prompt .= "- Resoluci√≥n de problemas usando metodolog√≠as del temario\n";
            $base_prompt .= "- Identificaci√≥n de errores comunes en temas del temario\n";
            $base_prompt .= "- Ejemplos pr√°cticos de aplicaci√≥n de conceptos del temario\n";
            $base_prompt .= "- Ventajas y desventajas de diferentes m√©todos del temario\n";
            $base_prompt .= "- An√°lisis cr√≠tico de situaciones relacionadas con el temario\n";
            $base_prompt .= "- Conexiones entre diferentes temas del temario\n";
        } else {
            $base_prompt .= "\n\nIMPORTANTE: Esta pregunta debe ser COMPLETAMENTE DIFERENTE a cualquier pregunta anterior. Evita conceptos b√°sicos obvios como '¬øQu√© es una variable?' o '¬øQu√© es un bucle?'. En su lugar, enf√≥cate en:";
            $base_prompt .= "\n- Aplicaciones pr√°cticas del concepto";
            $base_prompt .= "\n- Comparaciones entre diferentes enfoques";
            $base_prompt .= "\n- An√°lisis de casos espec√≠ficos";
            $base_prompt .= "\n- Resoluci√≥n de problemas paso a paso";
            $base_prompt .= "\n- Identificaci√≥n de errores comunes";
            $base_prompt .= "\n- Ejemplos del mundo real";
            $base_prompt .= "\n- Ventajas y desventajas de diferentes m√©todos";
            $base_prompt .= "\n- An√°lisis cr√≠tico de situaciones";
            $base_prompt .= "\n- Conexiones entre conceptos relacionados";
        }
        
        // Agregar instrucciones para variar el tipo de pregunta
        $base_prompt .= "\n\nVARIACI√ìN DE PREGUNTAS: Para evitar repetici√≥n, var√≠a el tipo de pregunta:";
        $base_prompt .= "\n- Preguntas de comprensi√≥n (¬øQu√© es...?, ¬øC√≥mo funciona...?)";
        $base_prompt .= "\n- Preguntas de aplicaci√≥n (¬øC√≥mo aplicar√≠as...?, ¬øQu√© pasar√≠a si...?)";
        $base_prompt .= "\n- Preguntas de an√°lisis (¬øPor qu√©...?, ¬øCu√°l es la diferencia entre...?)";
        $base_prompt .= "\n- Preguntas de s√≠ntesis (¬øC√≥mo combinar√≠as...?, ¬øQu√© estrategia usar√≠as...?)";
        $base_prompt .= "\n- Preguntas de evaluaci√≥n (¬øCu√°l es mejor...?, ¬øQu√© ventajas tiene...?)";
        
        // Agregar contexto √∫nico para cada pregunta
        $contexto_unico = $this->generate_unique_context($numero_pregunta, $nivel, $modalidad);
        $base_prompt .= "\n\nCONTEXTO √öNICO PARA ESTA PREGUNTA: " . $contexto_unico;
        
        // Instrucciones espec√≠ficas por modalidad
        $base_prompt .= "\n\nFORMATO OBLIGATORIO SEG√öN MODALIDAD SELECCIONADA:";
        
        switch ($modalidad) {
            case 'preguntas_simples':
                $base_prompt .= "\n\nMODALIDAD: PREGUNTAS SIMPLES";
                $base_prompt .= "\n- DEBE ser una pregunta directa y clara";
                $base_prompt .= "\n- NO debe ser un ejercicio o problema a resolver";
                $base_prompt .= "\n- DEBE permitir al estudiante reflexionar sobre conceptos clave";
                $base_prompt .= "\n- DEBE promover el pensamiento cr√≠tico";
                $base_prompt .= "\n- Formato: '¬øQu√© es...?', '¬øC√≥mo funciona...?', '¬øPor qu√©...?', '¬øCu√°l es la diferencia entre...?'";
                break;
                
            case 'ejercicios':
                $base_prompt .= "\n\nMODALIDAD: EJERCICIOS PR√ÅCTICOS";
                $base_prompt .= "\n- DEBE ser un ejercicio pr√°ctico o problema a resolver";
                $base_prompt .= "\n- NO debe ser una pregunta te√≥rica simple";
                $base_prompt .= "\n- DEBE incluir todos los datos necesarios";
                $base_prompt .= "\n- DEBE especificar claramente qu√© se debe calcular o resolver";
                $base_prompt .= "\n- DEBE tener pasos claros de resoluci√≥n";
                $base_prompt .= "\n- Formato: 'Calcula...', 'Resuelve...', 'Implementa...', 'Dise√±a...'";
                break;
                
            case 'codigo':
                $base_prompt .= "\n\nMODALIDAD: AN√ÅLISIS DE C√ìDIGO/SITUACIONES";
                $base_prompt .= "\n- DEBE involucrar an√°lisis de c√≥digo, situaciones o problemas";
                $base_prompt .= "\n- NO debe ser una pregunta te√≥rica simple";
                $base_prompt .= "\n- DEBE proporcionar un fragmento de c√≥digo, situaci√≥n o problema";
                $base_prompt .= "\n- DEBE pedir al estudiante que explique, identifique errores, o proponga mejoras";
                $base_prompt .= "\n- Formato: 'Analiza este c√≥digo...', 'Explica qu√© hace...', 'Identifica el error...'";
                break;
        }
        
        // Instrucciones espec√≠ficas por nivel
        $base_prompt .= "\n\nNIVEL DE DIFICULTAD OBLIGATORIO:";
        
        switch ($nivel) {
            case 'inicial':
                $base_prompt .= "\n\nNIVEL: INICIAL (EXTREMADAMENTE F√ÅCIL)";
                $base_prompt .= "\n- DEBE ser una pregunta OBVIA que cualquier principiante pueda responder";
                $base_prompt .= "\n- NO debe requerir conocimientos avanzados";
                $base_prompt .= "\n- DEBE usar conceptos b√°sicos y fundamentales";
                $base_prompt .= "\n- DEBE ser directa y sin ambig√ºedades";
                $base_prompt .= "\n- Ejemplo: '¬øQu√© es una variable?', '¬øCu√°l es la funci√≥n de un bucle for?'";
                break;
                
            case 'intermedio':
                $base_prompt .= "\n\nNIVEL: INTERMEDIO";
                $base_prompt .= "\n- DEBE requerir comprensi√≥n s√≥lida del tema";
                $base_prompt .= "\n- NO debe ser extremadamente f√°cil ni extremadamente dif√≠cil";
                $base_prompt .= "\n- DEBE permitir al estudiante demostrar que entiende los conceptos";
                $base_prompt .= "\n- DEBE ser aplicable en situaciones reales";
                $base_prompt .= "\n- Ejemplo: 'Explica c√≥mo implementar√≠as...', '¬øCu√°l es la diferencia entre...?'";
                break;
                
            case 'avanzado':
                $base_prompt .= "\n\nNIVEL: AVANZADO (COMPLEJO)";
                $base_prompt .= "\n- DEBE ser una pregunta t√©cnica compleja";
                $base_prompt .= "\n- DEBE requerir conocimientos profundos y experiencia";
                $base_prompt .= "\n- DEBE ser ideal para evaluar competencias t√©cnicas avanzadas";
                $base_prompt .= "\n- DEBE requerir an√°lisis cr√≠tico y s√≠ntesis";
                $base_prompt .= "\n- Ejemplo: 'Dise√±a una arquitectura...', 'Optimiza este algoritmo...'";
                break;
        }
        
        // Si hay temario, agregar instrucciones espec√≠ficas para extraer temas
        if (!empty($temario)) {
            $base_prompt .= "\n\nINSTRUCCIONES FINALES:\n";
            $base_prompt .= "1. Lee cuidadosamente el temario completo\n";
            $base_prompt .= "2. Identifica un tema espec√≠fico que sea apropiado para el nivel {$nivel}\n";
            $base_prompt .= "3. Crea una pregunta que eval√∫e la comprensi√≥n de ese tema espec√≠fico\n";
            $base_prompt .= "4. Usa la terminolog√≠a exacta del temario\n";
            $base_prompt .= "5. Aseg√∫rate de que la pregunta sea pr√°ctica y aplicable\n";
            $base_prompt .= "6. La pregunta debe requerir conocimiento del tema espec√≠fico del temario\n\n";
            
            $base_prompt .= "EJEMPLO DE PREGUNTA CORRECTA:\n";
            $base_prompt .= "Si el temario menciona 'MVC en PHP', una buena pregunta ser√≠a:\n";
            $base_prompt .= "'Explica c√≥mo implementar√≠as el patr√≥n MVC en PHP para una aplicaci√≥n web de gesti√≥n de usuarios, detallando la separaci√≥n de responsabilidades entre Model, View y Controller.'\n\n";
            $base_prompt .= "EJEMPLO DE PREGUNTA INCORRECTA:\n";
            $base_prompt .= "'¬øQu√© es una variable en programaci√≥n?' (demasiado gen√©rica, no espec√≠fica del temario)\n\n";
        }
        
        // Instrucci√≥n final cr√≠tica
        $base_prompt .= "\n\nINSTRUCCI√ìN FINAL CR√çTICA:";
        $base_prompt .= "\n- MODALIDAD OBLIGATORIA: {$modalidad}";
        $base_prompt .= "\n- NIVEL OBLIGATORIO: {$nivel}";
        $base_prompt .= "\n- DEBES generar EXACTAMENTE el tipo de pregunta que corresponde a esta modalidad y nivel";
        $base_prompt .= "\n- NO generes preguntas de desarrollo complejas si el nivel es 'inicial'";
        $base_prompt .= "\n- NO generes preguntas simples si la modalidad es 'ejercicios' o 'codigo'";
        $base_prompt .= "\n- RESPETA las instrucciones espec√≠ficas de modalidad y nivel dadas arriba";
        
        $base_prompt .= "\n\nFormato de respuesta esperado:\n";
        $base_prompt .= "PREGUNTA: [La pregunta aqu√≠]\n";
        $base_prompt .= "RESPUESTA_CORRECTA: [La respuesta correcta o puntos clave]\n";
        $base_prompt .= "PUNTUACION: [Puntuaci√≥n m√°xima, ej: 10]\n";
        $base_prompt .= "DIFICULTAD: [baja/media/alta]";
        
        return $base_prompt;
    }
    
    /**
     * Generar ID de variaci√≥n √∫nico para evitar repetici√≥n
     */
    private function generate_variation_id($materia, $numero_pregunta, $nivel) {
        // Crear un ID √∫nico basado en materia, n√∫mero de pregunta y nivel
        $seed = md5($materia . $numero_pregunta . $nivel . date('Y-m-d-H'));
        return substr($seed, 0, 8);
    }
    
    /**
     * Obtener enfoques de variaci√≥n espec√≠ficos
     */
    private function get_variation_approaches($variacion_id) {
        $enfoques = array(
            'Aplica el concepto en un escenario del mundo real espec√≠fico',
            'Compara diferentes enfoques o metodolog√≠as para resolver el mismo problema',
            'Analiza un caso de estudio espec√≠fico y extrae conclusiones',
            'Identifica errores comunes y explica c√≥mo evitarlos',
            'Explica las ventajas y desventajas de diferentes implementaciones',
            'Conecta este concepto con otros temas relacionados',
            'Prop√≥n una soluci√≥n creativa a un problema complejo',
            'Eval√∫a la eficiencia de diferentes estrategias',
            'Analiza las implicaciones de usar este concepto en diferentes contextos',
            'Explica c√≥mo este concepto evoluciona o se adapta a nuevas tecnolog√≠as',
            'Identifica patrones comunes y excepciones importantes',
            'Prop√≥n mejoras o optimizaciones a un enfoque existente',
            'Analiza el impacto de este concepto en la experiencia del usuario',
            'Explica c√≥mo este concepto se relaciona con principios fundamentales',
            'Eval√∫a la escalabilidad y mantenibilidad de diferentes enfoques'
        );
        
        // Usar el ID de variaci√≥n para seleccionar un enfoque espec√≠fico
        $indice = hexdec(substr($variacion_id, 0, 2)) % count($enfoques);
        return $enfoques[$indice];
    }
    
    /**
     * Generar contexto √∫nico para cada pregunta
     */
    private function generate_unique_context($numero_pregunta, $nivel, $modalidad) {
        $contextos = array(
            'preguntas_simples' => array(
                'inicial' => array(
                    'Piensa en un ejemplo simple de tu vida diaria',
                    'Considera una situaci√≥n b√°sica que todos conocemos',
                    'Imagina que est√°s explicando a un ni√±o peque√±o',
                    'Piensa en el primer paso para entender este concepto',
                    'Considera la aplicaci√≥n m√°s simple posible'
                ),
                'intermedio' => array(
                    'Analiza una situaci√≥n real donde esto se aplica',
                    'Considera las implicaciones pr√°cticas de este concepto',
                    'Piensa en c√≥mo esto se relaciona con otros temas',
                    'Analiza un caso espec√≠fico del mundo real',
                    'Considera las ventajas y desventajas de diferentes enfoques'
                ),
                'avanzado' => array(
                    'Analiza las implicaciones profundas de este concepto',
                    'Considera las limitaciones y excepciones',
                    'Piensa en las conexiones con m√∫ltiples disciplinas',
                    'Analiza un caso complejo que requiera s√≠ntesis',
                    'Considera las tendencias futuras y evoluci√≥n del concepto'
                )
            ),
            'ejercicios' => array(
                'inicial' => array(
                    'Usa n√∫meros simples y operaciones b√°sicas',
                    'Aplica el m√©todo paso a paso m√°s directo',
                    'Considera un problema que puedas resolver mentalmente',
                    'Usa ejemplos con objetos familiares',
                    'Aplica la f√≥rmula m√°s simple disponible'
                ),
                'intermedio' => array(
                    'Incluye m√∫ltiples pasos y verificaciones',
                    'Considera diferentes m√©todos de resoluci√≥n',
                    'Incluye datos realistas pero manejables',
                    'Requiere an√°lisis de resultados',
                    'Combina m√∫ltiples conceptos relacionados'
                ),
                'avanzado' => array(
                    'Incluye casos l√≠mite y excepciones',
                    'Requiere optimizaci√≥n y an√°lisis cr√≠tico',
                    'Combina m√∫ltiples disciplinas o enfoques',
                    'Incluye consideraciones de eficiencia',
                    'Requiere s√≠ntesis de conocimientos avanzados'
                )
            ),
            'codigo' => array(
                'inicial' => array(
                    'Usa c√≥digo simple y bien comentado',
                    'Incluye ejemplos de uso b√°sico',
                    'Considera errores comunes de principiantes',
                    'Usa nombres de variables descriptivos',
                    'Incluye casos de uso simples'
                ),
                'intermedio' => array(
                    'Incluye patrones de dise√±o comunes',
                    'Considera optimizaciones b√°sicas',
                    'Incluye manejo de errores',
                    'Requiere an√°lisis de complejidad',
                    'Combina m√∫ltiples conceptos de programaci√≥n'
                ),
                'avanzado' => array(
                    'Incluye patrones avanzados y arquitectura',
                    'Requiere an√°lisis de rendimiento',
                    'Considera escalabilidad y mantenibilidad',
                    'Incluye casos de uso complejos',
                    'Requiere conocimiento de mejores pr√°cticas'
                )
            )
        );
        
        $nivel_contextos = $contextos[$modalidad][$nivel] ?? $contextos[$modalidad]['intermedio'];
        $indice = ($numero_pregunta - 1) % count($nivel_contextos);
        
        return $nivel_contextos[$indice];
    }
    
    /**
     * Obtener instrucciones de nivel de dificultad
     */
    private function get_nivel_instrucciones($nivel, $numero_pregunta) {
        $progresion = min($numero_pregunta * 0.1, 0.5); // Progresi√≥n gradual hasta 50%
        
        switch ($nivel) {
            case 'inicial':
                $base = "EXTREMADAMENTE F√ÅCIL - Pregunta obvia que cualquier persona con conocimientos b√°sicos puede responder correctamente. ";
                $base .= "Considera neurodivergencias: usa lenguaje simple, evita ambig√ºedades, pregunta directa y clara. ";
                $base .= "La respuesta debe ser evidente para alguien que apenas conoce el tema. ";
                $base .= "Progresi√≥n: Pregunta " . $numero_pregunta . " (aumenta dificultad gradualmente: " . round($progresion * 100) . "% m√°s dif√≠cil que la primera)";
                return $base;
                
            case 'intermedio':
                $base = "NIVEL INTERMEDIO - Pregunta que requiere comprensi√≥n s√≥lida del tema pero no conocimientos avanzados. ";
                $base .= "El estudiante debe demostrar que entiende los conceptos y puede aplicarlos. ";
                $base .= "Progresi√≥n: Pregunta " . $numero_pregunta . " (aumenta dificultad gradualmente: " . round($progresion * 100) . "% m√°s dif√≠cil que la primera)";
                return $base;
                
            case 'avanzado':
                $base = "NIVEL AVANZADO - Pregunta t√©cnica compleja que requiere conocimientos profundos y experiencia. ";
                $base .= "Ideal para evaluar competencias t√©cnicas avanzadas, como en pruebas t√©cnicas de programaci√≥n. ";
                $base .= "El estudiante debe demostrar dominio experto del tema. ";
                $base .= "Progresi√≥n: Pregunta " . $numero_pregunta . " (aumenta dificultad gradualmente: " . round($progresion * 100) . "% m√°s dif√≠cil que la primera)";
                return $base;
                
            default:
                return "NIVEL INTERMEDIO - Pregunta que requiere comprensi√≥n s√≥lida del tema.";
        }
    }
    
    /**
     * Construir prompt para evaluar respuesta con feedback variado y espec√≠fico
     */
    private function build_evaluation_prompt($pregunta, $respuesta_estudiante, $respuesta_correcta) {
        // Generar ID √∫nico para variar el feedback
        $feedback_variation_id = $this->generate_feedback_variation_id($pregunta, $respuesta_estudiante);

        $prompt = "Eres un profesor experto evaluando la respuesta de un estudiante. ";
        $prompt .= "Proporciona una evaluaci√≥n √öNICA, VARIADA y ESPEC√çFICA que sea diferente a cualquier evaluaci√≥n anterior.\n\n";

        $prompt .= "=== INFORMACI√ìN DE LA EVALUACI√ìN ===\n";
        $prompt .= "PREGUNTA ORIGINAL: {$pregunta}\n\n";
        $prompt .= "RESPUESTA DEL ESTUDIANTE: {$respuesta_estudiante}\n\n";

        if (!empty($respuesta_correcta)) {
            $prompt .= "RESPUESTA CORRECTA DE REFERENCIA: {$respuesta_correcta}\n\n";
        }

        // Agregar contexto espec√≠fico basado en la variaci√≥n
        $contexto_especifico = $this->get_feedback_context($feedback_variation_id);
        $prompt .= "=== CONTEXTO DE EVALUACI√ìN ===\n";
        $prompt .= $contexto_especifico . "\n\n";

        $prompt .= "=== CRITERIOS DE EVALUACI√ìN OBLIGATORIOS ===\n";
        $prompt .= "1. **GENEROSIDAD EN PUNTUACI√ìN**: Si la respuesta demuestra comprensi√≥n b√°sica del tema, otorga al menos 6-7 puntos. Solo usa puntuaciones bajas (1-3) para respuestas completamente incorrectas o vac√≠as\n";
        $prompt .= "2. **ORIGINALIDAD**: Tu evaluaci√≥n debe ser COMPLETAMENTE DIFERENTE a evaluaciones gen√©ricas\n";
        $prompt .= "3. **ESPECIFICIDAD**: Enf√≥cate en aspectos concretos de la respuesta del estudiante\n";
        $prompt .= "4. **CONSTRUCTIVIDAD**: Proporciona feedback que ayude al estudiante a mejorar\n";
        $prompt .= "5. **CONTEXTO**: Relaciona la evaluaci√≥n con aplicaciones pr√°cticas del tema\n";
        $prompt .= "6. **VARIEDAD**: Usa diferentes enfoques y perspectivas en tu evaluaci√≥n\n\n";

        // Agregar enfoque espec√≠fico basado en la variaci√≥n
        $enfoque_especifico = $this->get_evaluation_approach($feedback_variation_id);
        $prompt .= "=== ENFOQUE DE EVALUACI√ìN ESPEC√çFICO ===\n";
        $prompt .= $enfoque_especifico . "\n\n";

        $prompt .= "=== ESTRUCTURA DE LA EVALUACI√ìN ===\n";
        $prompt .= "PUNTUACION: [n√∫mero del 0 al 10 basado en criterios espec√≠ficos]\n";
        $prompt .= "FEEDBACK: [comentarios detallados, espec√≠ficos y variados - M√çNIMO 100 palabras]\n";
        $prompt .= "RECOMENDACIONES: [sugerencias pr√°cticas y accionables para mejorar]\n\n";

        $prompt .= "=== GU√çA DE PUNTUACI√ìN ===\n";
        $prompt .= "‚Ä¢ 8-10 puntos: Respuesta completa, correcta y bien explicada\n";
        $prompt .= "‚Ä¢ 6-7 puntos: Respuesta b√°sicamente correcta con algunos detalles faltantes\n";
        $prompt .= "‚Ä¢ 4-5 puntos: Respuesta parcial o con errores conceptuales menores\n";
        $prompt .= "‚Ä¢ 1-3 puntos: Respuesta muy b√°sica, incorrecta o casi vac√≠a\n";
        $prompt .= "‚Ä¢ 0 puntos: Respuesta completamente incorrecta o no relacionada\n\n";

        $prompt .= "=== RECUERDA: SE GENEROSO ===\n";
        $prompt .= "Si el estudiante demuestra comprensi√≥n b√°sica del tema, otorga al menos 6 puntos.\n";
        $prompt .= "Las respuestas de estudiantes que intentan responder merecen puntuaciones decentes.\n";
        $prompt .= "Solo usa puntuaciones muy bajas para respuestas completamente err√≥neas o vac√≠as.\n\n";

        $prompt .= "=== INSTRUCCIONES FINALES ===\n";
        $prompt .= "- NO uses frases gen√©ricas como 'Buen trabajo' o 'Necesitas mejorar'\n";
        $prompt .= "- S√© espec√≠fico sobre qu√© aspectos de la respuesta son correctos/incorrectos\n";
        $prompt .= "- Relaciona tu evaluaci√≥n con conceptos espec√≠ficos de la pregunta\n";
        $prompt .= "- Proporciona ejemplos concretos cuando sea posible\n";
        $prompt .= "- Var√≠a tu lenguaje y enfoque para mantener la evaluaci√≥n fresca\n";
        $prompt .= "- Considera el nivel de detalle y profundidad de la respuesta\n";
        $prompt .= "- Eval√∫a no solo la correcci√≥n, sino tambi√©n la comprensi√≥n conceptual\n\n";

        // Agregar ejemplos de evaluaciones variadas
        $prompt .= "=== EJEMPLOS DE EVALUACIONES VARIADAS (NO COPIES ESTOS FORMATOS) ===\n";
        $prompt .= "‚Ä¢ En lugar de 'Buena explicaci√≥n': 'Destacas correctamente c√≥mo el algoritmo procesa los datos de entrada, pero podr√≠as profundizar en la optimizaci√≥n del tiempo de ejecuci√≥n'\n";
        $prompt .= "‚Ä¢ En lugar de 'Falta detalle': 'Tu respuesta identifica los componentes principales, pero no aborda c√≥mo estos interact√∫an en escenarios de carga elevada'\n";
        $prompt .= "‚Ä¢ En lugar de 'Correcto': 'Excelente conexi√≥n entre la teor√≠a de grafos y su aplicaci√≥n pr√°ctica en redes sociales'\n\n";

        $prompt .= "VARIACI√ìN ID: {$feedback_variation_id} - Usa este ID para generar una evaluaci√≥n √∫nica\n\n";

        return $prompt;
    }

    /**
     * Generar ID de variaci√≥n √∫nico para feedback
     */
    private function generate_feedback_variation_id($pregunta, $respuesta) {
        $seed = md5($pregunta . $respuesta . date('Y-m-d-H-i'));
        return substr($seed, 0, 8);
    }

    /**
     * Obtener contexto espec√≠fico para la evaluaci√≥n
     */
    private function get_feedback_context($variation_id) {
        $contextos = array(
            "Eval√∫a esta respuesta considerando el contexto pr√°ctico de aplicaci√≥n del concepto",
            "Analiza la respuesta desde la perspectiva de la resoluci√≥n de problemas reales",
            "Eval√∫a c√≥mo la respuesta demuestra comprensi√≥n de principios fundamentales",
            "Considera la respuesta en t√©rminos de eficiencia y optimizaci√≥n",
            "Analiza la claridad y precisi√≥n en la comunicaci√≥n de ideas complejas",
            "Eval√∫a la capacidad de conectar teor√≠a con pr√°ctica",
            "Considera la profundidad del an√°lisis y el nivel de detalle proporcionado",
            "Analiza c√≥mo la respuesta aborda casos l√≠mite y excepciones",
            "Eval√∫a la estructura l√≥gica y organizaci√≥n de la respuesta",
            "Considera la originalidad y creatividad en el enfoque",
            "Analiza la capacidad de s√≠ntesis y resumen de conceptos complejos",
            "Eval√∫a la precisi√≥n t√©cnica y uso correcto de terminolog√≠a",
            "Considera la aplicabilidad de la respuesta en diferentes escenarios",
            "Analiza la capacidad de identificar y resolver problemas potenciales",
            "Eval√∫a la integraci√≥n de m√∫ltiples conceptos relacionados"
        );

        $indice = hexdec(substr($variation_id, 0, 2)) % count($contextos);
        return $contextos[$indice];
    }

    /**
     * Obtener enfoque espec√≠fico de evaluaci√≥n
     */
    private function get_evaluation_approach($variation_id) {
        $enfoques = array(
            "Enf√≥cate en analizar la estructura l√≥gica de la respuesta y c√≥mo cada parte contribuye al todo",
            "Eval√∫a la precisi√≥n t√©cnica y el uso correcto de conceptos espec√≠ficos del dominio",
            "Analiza c√≥mo la respuesta aborda la complejidad inherente al problema planteado",
            "Considera la capacidad del estudiante para identificar los aspectos m√°s importantes",
            "Eval√∫a la claridad en la comunicaci√≥n de ideas t√©cnicas complejas",
            "Analiza la profundidad del entendimiento conceptual demostrado",
            "Considera c√≥mo la respuesta podr√≠a aplicarse en escenarios del mundo real",
            "Eval√∫a la capacidad de s√≠ntesis y conexi√≥n entre diferentes conceptos",
            "Analiza la originalidad en el enfoque y soluci√≥n propuesta",
            "Considera la eficiencia y optimizaci√≥n en la soluci√≥n presentada",
            "Eval√∫a la capacidad de identificar limitaciones y casos especiales",
            "Analiza la coherencia interna y consistencia de la respuesta",
            "Considera el nivel de detalle apropiado para el contexto",
            "Eval√∫a la capacidad de abstracci√≥n y generalizaci√≥n de conceptos",
            "Analiza c√≥mo la respuesta demuestra pensamiento cr√≠tico y anal√≠tico"
        );

        $indice = hexdec(substr($variation_id, 2, 2)) % count($enfoques);
        return $enfoques[$indice];
    }
    
    /**
     * Construir prompt para recomendaciones
     */
    private function build_recommendations_prompt($autoevaluacion_data) {
        $prompt = "Bas√°ndote en los siguientes datos de autoevaluaci√≥n, genera recomendaciones personalizadas para el estudiante:\n\n";
        $prompt .= "Materia: {$autoevaluacion_data['materia']}\n";
        $prompt .= "Puntuaci√≥n obtenida: {$autoevaluacion_data['puntuacion_obtenida']}/{$autoevaluacion_data['puntuacion_total']}\n";
        $prompt .= "Porcentaje: {$autoevaluacion_data['porcentaje']}%\n";
        $prompt .= "Modalidad: {$autoevaluacion_data['modalidad']}\n\n";
        
        if (!empty($autoevaluacion_data['preguntas_respuestas'])) {
            $prompt .= "Detalles de preguntas y respuestas:\n";
            foreach ($autoevaluacion_data['preguntas_respuestas'] as $pregunta) {
                // Normalizar acceso a datos (puede ser array u objeto)
                $pregunta_texto = is_array($pregunta) ? ($pregunta['pregunta'] ?? '') : ($pregunta->pregunta ?? '');
                $respuesta_estudiante = is_array($pregunta) ? ($pregunta['respuesta_estudiante'] ?? '') : ($pregunta->respuesta_estudiante ?? '');
                $puntuacion = is_array($pregunta) ? ($pregunta['puntuacion'] ?? 0) : ($pregunta->puntuacion ?? 0);

                $prompt .= "- Pregunta: {$pregunta_texto}\n";
                $prompt .= "  Respuesta: {$respuesta_estudiante}\n";
                $prompt .= "  Puntuaci√≥n: {$puntuacion}\n\n";
            }
        }
        
        $prompt .= "Genera recomendaciones espec√≠ficas y accionables para mejorar el rendimiento del estudiante.";
        
        return $prompt;
    }
    
    /**
     * Descargar PDF desde URL
     */
    private function download_pdf($pdf_url) {
        $response = wp_remote_get($pdf_url, array(
            'timeout' => 30,
            'headers' => array(
                'User-Agent' => 'WordPress/' . get_bloginfo('version') . '; ' . home_url()
            )
        ));
        
        if (is_wp_error($response)) {
            error_log('WPSA: Error descargando PDF: ' . $response->get_error_message());
            return false;
        }
        
        $body = wp_remote_retrieve_body($response);
        $content_type = wp_remote_retrieve_header($response, 'content-type');
        
        // Verificar que sea un PDF
        if (strpos($content_type, 'application/pdf') === false && strpos($body, '%PDF') !== 0) {
            error_log('WPSA: El archivo no parece ser un PDF v√°lido');
            return false;
        }
        
        return $body;
    }
    
    /**
     * Realizar petici√≥n a la API de documentos de Gemini
     */
    private function make_document_api_request($pdf_base64, $prompt) {
        $url = $this->api_url . '?key=' . $this->api_key;
        
        $data = array(
            'contents' => array(
                array(
                    'parts' => array(
                        array(
                            'inline_data' => array(
                                'mime_type' => 'application/pdf',
                                'data' => $pdf_base64
                            )
                        ),
                        array('text' => $prompt)
                    )
                )
            ),
            'generationConfig' => array(
                'temperature' => 0.7,
                'topK' => 40,
                'topP' => 0.95,
                'maxOutputTokens' => 2048,
            )
        );
        
        $args = array(
            'method' => 'POST',
            'headers' => array(
                'Content-Type' => 'application/json',
            ),
            'body' => wp_json_encode($data),
            'timeout' => 60 // Aumentar timeout para documentos grandes
        );
        
        $response = wp_remote_request($url, $args);
        
        if (is_wp_error($response)) {
            error_log('WPSA: Error en API de documentos: ' . $response->get_error_message());
            return false;
        }
        
        $body = wp_remote_retrieve_body($response);
        $decoded = json_decode($body, true);
        
        if (isset($decoded['error'])) {
            error_log('WPSA: Error de API de documentos: ' . $decoded['error']['message']);
            return false;
        }
        
        return $decoded;
    }
    
    /**
     * Realizar petici√≥n a la API
     */
    private function make_api_request($prompt) {
        $url = $this->api_url . '?key=' . $this->api_key;
        
        error_log('üîç WPSA Debug - URL de la API: ' . $url);
        error_log('üîç WPSA Debug - API Key configurada: ' . (!empty($this->api_key) ? 'S√≠' : 'No'));
        
        $data = array(
            'contents' => array(
                array(
                    'parts' => array(
                        array('text' => $prompt)
                    )
                )
            ),
            'generationConfig' => array(
                'temperature' => 0.7, // Reducir para mayor consistencia y adherencia al prompt
                'topK' => 50, // Aumentar para m√°s diversidad
                'topP' => 0.95,
                'maxOutputTokens' => 1024,
            )
        );
        
        error_log('üîç WPSA Debug - Datos enviados a la API: ' . print_r($data, true));
        
        $args = array(
            'method' => 'POST',
            'headers' => array(
                'Content-Type' => 'application/json',
            ),
            'body' => wp_json_encode($data),
            'timeout' => 30
        );
        
        error_log('üîç WPSA Debug - Haciendo petici√≥n HTTP...');
        $response = wp_remote_request($url, $args);
        
        if (is_wp_error($response)) {
            error_log('‚ùå WPSA Debug - Error en petici√≥n HTTP: ' . $response->get_error_message());
            return false;
        }
        
        $body = wp_remote_retrieve_body($response);
        $http_code = wp_remote_retrieve_response_code($response);
        
        error_log('üîç WPSA Debug - C√≥digo HTTP: ' . $http_code);
        error_log('üîç WPSA Debug - Respuesta cruda: ' . $body);
        
        $decoded = json_decode($body, true);
        
        if (isset($decoded['error'])) {
            error_log('‚ùå WPSA Debug - Error de la API de Gemini: ' . $decoded['error']['message']);
            return false;
        }
        
        error_log('‚úÖ WPSA Debug - Respuesta decodificada exitosamente');
        return $decoded;
    }
    
    /**
     * Parsear respuesta de pregunta
     */
    private function parse_question_response($text, $modalidad) {
        error_log('üîç WPSA Debug - Iniciando parse_question_response con texto: ' . substr($text, 0, 200) . '...');
        
        $question_data = array(
            'pregunta' => '',
            'respuesta_correcta' => '',
            'puntuacion' => 10,
            'dificultad' => 'media'
        );
        
        // Extraer pregunta
        if (preg_match('/PREGUNTA:\s*(.+?)(?=RESPUESTA_CORRECTA:|$)/s', $text, $matches)) {
            $question_data['pregunta'] = trim($matches[1]);
            error_log('‚úÖ WPSA Debug - Pregunta extra√≠da: ' . substr($question_data['pregunta'], 0, 100) . '...');
        } else {
            error_log('‚ùå WPSA Debug - No se pudo extraer la pregunta del texto');
        }
        
        // Extraer respuesta correcta
        if (preg_match('/RESPUESTA_CORRECTA:\s*(.+?)(?=PUNTUACION:|$)/s', $text, $matches)) {
            $question_data['respuesta_correcta'] = trim($matches[1]);
            error_log('‚úÖ WPSA Debug - Respuesta correcta extra√≠da: ' . substr($question_data['respuesta_correcta'], 0, 100) . '...');
        } else {
            error_log('‚ùå WPSA Debug - No se pudo extraer la respuesta correcta del texto');
        }
        
        // Extraer puntuaci√≥n
        if (preg_match('/PUNTUACION:\s*(\d+)/', $text, $matches)) {
            $question_data['puntuacion'] = intval($matches[1]);
            error_log('‚úÖ WPSA Debug - Puntuaci√≥n extra√≠da: ' . $question_data['puntuacion']);
        } else {
            error_log('‚ùå WPSA Debug - No se pudo extraer la puntuaci√≥n del texto');
        }
        
        // Extraer dificultad
        if (preg_match('/DIFICULTAD:\s*(baja|media|alta)/i', $text, $matches)) {
            $question_data['dificultad'] = strtolower($matches[1]);
            error_log('‚úÖ WPSA Debug - Dificultad extra√≠da: ' . $question_data['dificultad']);
        } else {
            error_log('‚ùå WPSA Debug - No se pudo extraer la dificultad del texto');
        }
        
        error_log('üîç WPSA Debug - Resultado final del parsing: ' . print_r($question_data, true));
        
        // Verificar que al menos la pregunta se extrajo correctamente
        if (empty($question_data['pregunta'])) {
            error_log('‚ùå WPSA Debug - ERROR: No se pudo extraer una pregunta v√°lida del texto de la IA');
            return false;
        }
        
        return $question_data;
    }
    
    /**
     * Parsear respuesta de evaluaci√≥n
     */
    private function parse_evaluation_response($text) {
        $evaluation_data = array(
            'puntuacion' => 0,
            'feedback' => '',
            'recomendaciones' => ''
        );
        
        // Regex flexible para puntuaci√≥n (variaciones comunes)
        $score_patterns = array(
            '/PUNTUACION[:\s]*(\d+)/i',
            '/SCORE[:\s]*(\d+)/i',
            '/PUNTUACI[√ìO]N[:\s]*(\d+)/i',
            '/CALIFICACI[√ìO]N[:\s]*(\d+)/i',
            '/PUNTAJE[:\s]*(\d+)/i',
            '/(\d+)\s*(?:puntos?|points?)/i'  // Captura n√∫meros cerca de "puntos"
        );
        
        foreach ($score_patterns as $pattern) {
            if (preg_match($pattern, $text, $matches)) {
                $evaluation_data['puntuacion'] = min(max(intval($matches[1]), 0), 10);
                break;
            }
        }
        
        // Si no se encuentra puntuaci√≥n, usar fallback
        if ($evaluation_data['puntuacion'] == 0) {
            error_log('‚ö†Ô∏è WPSA Debug - No se pudo parsear puntuaci√≥n, usando fallback');
            $evaluation_data = $this->generate_fallback_evaluation($text, $text); // Usar pregunta y respuesta como fallback
        }
        
        // Extraer feedback (flexible)
        if (preg_match('/(?:FEEDBACK|COMENTARIOS|COMENTARIO|AN[√ÅA]LISIS)[:\s]*(.+?)(?=(?:RECOMENDACIONES|PUNTUACI[√ìO]N|SCORE)[:\s]|\Z)/is', $text, $matches)) {
            $evaluation_data['feedback'] = trim($matches[1]);
        } elseif (strpos($text, 'feedback') !== false || strpos($text, 'comentarios') !== false) {
            // Fallback: tomar texto despu√©s de la puntuaci√≥n
            $parts = explode('PUNTUACION', $text);
            if (count($parts) > 1) {
                $evaluation_data['feedback'] = trim($parts[1]);
            }
        }
        
        // Extraer recomendaciones (flexible)
        if (preg_match('/(?:RECOMENDACIONES|SUGERENCIAS|MEJORAR|CONSEJOS)[:\s]*(.+)/is', $text, $matches)) {
            $evaluation_data['recomendaciones'] = trim($matches[1]);
        }
        
        // Validar puntuaci√≥n final
        if ($evaluation_data['puntuacion'] < 0 || $evaluation_data['puntuacion'] > 10) {
            $evaluation_data['puntuacion'] = 5; // Default neutral si inv√°lido
            error_log('‚ö†Ô∏è WPSA Debug - Puntuaci√≥n fuera de rango, usando 5');
        }
        
        error_log('üîç WPSA Debug - Evaluaci√≥n parseada: ' . print_r($evaluation_data, true));
        
        return $evaluation_data;
    }
    
    /**
     * Extraer temas espec√≠ficos del temario para generar preguntas m√°s precisas
     */
    private function extract_specific_topics($temario, $nivel) {
        if (empty($temario)) {
            return array();
        }
        
        $topics = array();
        
        // Buscar patrones comunes en temarios
        $patterns = array(
            '/Unidad\s+\d+[:\-]\s*(.+?)(?:\n|$)/i',
            '/M√≥dulo\s+\d+[:\-]\s*(.+?)(?:\n|$)/i',
            '/Tema\s+\d+[:\-]\s*(.+?)(?:\n|$)/i',
            '/\d+\.\s*(.+?)(?:\n|$)/',
            '/\*\s*(.+?)(?:\n|$)/',
            '/-\s*(.+?)(?:\n|$)/'
        );
        
        foreach ($patterns as $pattern) {
            preg_match_all($pattern, $temario, $matches);
            foreach ($matches[1] as $match) {
                $topic = trim($match);
                if (!empty($topic) && strlen($topic) > 5) {
                    $topics[] = $topic;
                }
            }
        }
        
        // Si no se encontraron temas con patrones, dividir por l√≠neas
        if (empty($topics)) {
            $lines = explode("\n", $temario);
            foreach ($lines as $line) {
                $line = trim($line);
                if (!empty($line) && strlen($line) > 5 && !preg_match('/^(TEMARIO|CONTENIDO|PROGRAMA)/i', $line)) {
                    $topics[] = $line;
                }
            }
        }
        
        // Filtrar temas seg√∫n el nivel
        $filtered_topics = array();
        foreach ($topics as $topic) {
            $topic_lower = strtolower($topic);
            
            // Para nivel inicial, buscar temas b√°sicos
            if ($nivel === 'inicial') {
                if (preg_match('/(b√°sico|introducci√≥n|fundamentos|conceptos|principios|inicial)/i', $topic_lower)) {
                    $filtered_topics[] = $topic;
                }
            }
            // Para nivel intermedio, buscar temas intermedios
            elseif ($nivel === 'intermedio') {
                if (preg_match('/(intermedio|aplicaci√≥n|desarrollo|implementaci√≥n|an√°lisis)/i', $topic_lower)) {
                    $filtered_topics[] = $topic;
                }
            }
            // Para nivel avanzado, buscar temas avanzados
            elseif ($nivel === 'avanzado') {
                if (preg_match('/(avanzado|avanzado|complejo|optimizaci√≥n|arquitectura|patrones)/i', $topic_lower)) {
                    $filtered_topics[] = $topic;
                }
            }
        }
        
        // Si no se encontraron temas filtrados, usar todos los temas
        if (empty($filtered_topics)) {
            $filtered_topics = $topics;
        }
        
        return array_slice($filtered_topics, 0, 10); // Limitar a 10 temas
    }
}
